import 'dart:math';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:sqflite/sqflite.dart';
import 'package:vongola/database/db_manage.dart';

class Page2 extends StatefulWidget {
  @override
  _Page2State createState() => _Page2State();
}

class _Page2State extends State<Page2> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey();
  String selectedButton = 'Day'; // เริ่มต้นที่ Day
  String selectedIcon = 'Pie'; // เริ่มต้นที่ Pie Chart
  double totalIncome = 0.0;
  double totalExpense = 0.0;
  List<PieChartSectionData> pieChartSections = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(title: Text('Static Chart')),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            children: [
              // ส่วนการแสดงปฏิทินและไอคอน
              TableCalendar(
                firstDay: DateTime.utc(2023, 1, 1),
                lastDay: DateTime.utc(2024, 12, 31),
                focusedDay: DateTime.now(),
              ),
              SizedBox(height: 20),
              // ไอคอนต่างๆ
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  _buildIconButton(Icons.pie_chart, 'Pie', Colors.blue, _showFinancialPieChart),
                  SizedBox(width: 20),
                  _buildIconButton(Icons.shopify_rounded, 'Status', Colors.green, _showStatus_Expense),
                  SizedBox(width: 20),
                  _buildIconButton(Icons.bar_chart, 'Bar', Colors.orange, _showFinancialBarChart),
                ],
              ),
              SizedBox(height: 20),
              // ปุ่ม Day, Month, Year
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  _buildPeriodButton('Day'),
                  SizedBox(width: 10),
                  _buildPeriodButton('Month'),
                  SizedBox(width: 10),
                  _buildPeriodButton('Year'),
                ],
              ),
              SizedBox(height: 20),
              // ส่วนแสดงกราฟ Pie Chart
              if (selectedIcon == 'Pie') _buildPieChart(), // เพิ่มแสดง Pie Chart เมื่อเลือก Pie
              // ส่วนแสดงกราฟ Bar Chart
              if (selectedIcon == 'Bar') _buildBarChart(),
            ],
          ),
        ),
      ),
    );
  }

  // สร้างปุ่มเลือกช่วงเวลา (Day, Month, Year)
  ElevatedButton _buildPeriodButton(String label) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: selectedButton == label ? Colors.blue : Colors.grey,
      ),
      onPressed: () {
        setState(() {
          selectedButton = label;
        });
        if (selectedIcon == 'Pie') {
          _showFinancialPieChart(context); // เรียกฟังก์ชันดึงข้อมูล Pie Chart เมื่อเลือกช่วงเวลา
        } else if (selectedIcon == 'Bar') {
          _showFinancialBarChart(context); // เรียกฟังก์ชันดึงข้อมูล Bar Chart เมื่อเลือกช่วงเวลา
        }
      },
      child: Text(label),
    );
  }

  // สร้างปุ่มไอคอน
  Widget _buildIconButton(IconData icon, String iconType, Color color, Function onPressed) {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black, width: 2),
        borderRadius: BorderRadius.circular(10),
      ),
      child: IconButton(
        icon: Icon(
          icon,
          color: selectedIcon == iconType ? color : Colors.black, // เปลี่ยนสีตามการเลือก
        ),
        onPressed: () {
          setState(() {
            selectedIcon = iconType;
          });
          onPressed(context);
        },
        iconSize: 60,
      ),
    );
  }

  // ฟังก์ชันดึงข้อมูล Pie Chart จากฐานข้อมูล
  Future<void> _fetchPieChartDataDay() async {
    final List<Map<String, dynamic>> result = await DatabaseManagement.instance.rawQuery(
      'SELECT Transactions.ID_type_transaction, SUM(Transactions.amount_transaction) AS total_amount_Pie, Type_transaction.type_transaction '
          'FROM Transactions '
          'JOIN Type_transaction ON Transactions.ID_type_transaction = Type_transaction.ID_type_transaction '
          'WHERE Transactions.type_expense = 1 AND DATE(Transactions.date_user) = DATE("now") '
          'GROUP BY Transactions.ID_type_transaction',
    );
    print('Result from database: $result');
    double totalAmount = result.fold(0, (sum, data) => sum + data['total_amount_Pie']);
    setState(() {
      pieChartSections = result.map((data) {
        double percentage = (data['total_amount_Pie'] / totalAmount) * 100; // คำนวณเปอร์เซ็นต์
        return PieChartSectionData(
          value: data['total_amount_Pie'].toDouble(),
          title: '${data['type_transaction']} \n${percentage.toStringAsFixed(1)}%', // แสดงชื่อประเภทและเปอร์เซ็นต์
          color: Colors.primaries[Random().nextInt(Colors.primaries.length)],
          radius: 50,
        );
      }).toList();
    });
  }

  Future<void> _fetchPieChartDataMonth() async {
    final List<Map<String, dynamic>> result = await DatabaseManagement.instance.rawQuery(
        '''
      SELECT Transactions.ID_type_transaction, SUM(Transactions.amount_transaction) AS total_amount_Pie, Type_transaction.type_transaction
      FROM Transactions
      JOIN Type_transaction ON Transactions.ID_type_transaction = Type_transaction.ID_type_transaction
      WHERE Transactions.type_expense = 1
      AND strftime('%Y-%m', Transactions.date_user) = strftime('%Y-%m', 'now')
      GROUP BY Transactions.ID_type_transaction
    ''');
    print('Result from database month: $result');
    setState(() {
      pieChartSections = result.map((data) {
        return PieChartSectionData(
          value: data['total_amount_Pie'].toDouble(),
          title: data['type_transaction'],
          color: Colors.primaries[Random().nextInt(Colors.primaries.length)],
          radius: 50,
        );
      }).toList();
    });
  }

  Future<void> _fetchPieChartDataYear() async {
    final List<Map<String, dynamic>> result = await DatabaseManagement.instance.rawQuery(
        '''
      SELECT Transactions.ID_type_transaction, SUM(Transactions.amount_transaction) AS total_amount_Pie, Type_transaction.type_transaction
      FROM Transactions
      JOIN Type_transaction ON Transactions.ID_type_transaction = Type_transaction.ID_type_transaction
      WHERE Transactions.type_expense = 1
      AND strftime('%Y', Transactions.date_user) = strftime('%Y', 'now')
      GROUP BY Transactions.ID_type_transaction
    ''');
    print('Result from year  : $result');
    setState(() {
      pieChartSections = result.map((data) {
        return PieChartSectionData(
          value: data['total_amount_Pie'].toDouble(),
          title: data['type_transaction'],
          color: Colors.primaries[Random().nextInt(Colors.primaries.length)],
          radius: 50,
        );
      }).toList();
    });
  }

  Widget _buildIndicator() {
    return Column(
      children: pieChartSections.map((section) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Container(
              width: 20,
              height: 20,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: section.color, // สีของ Indicator ตาม PieChartSectionData
              ),
            ),
            SizedBox(width: 8),
            Text(
              '${section.title.split('\n')[0]}: ${section.value.toStringAsFixed(2)}', // แสดงชื่อและมูลค่า
              style: TextStyle(fontSize: 16),
            ),
          ],
        );
      }).toList(),
    );
  }


  // ฟังก์ชันสร้าง Pie Chart
  // Widget _buildPieChart() {
  //   return Container(
  //     height: 300,
  //     child: PieChart(
  //       PieChartData(
  //         sections: pieChartSections,
  //         centerSpaceRadius: 40,
  //         sectionsSpace: 2,
  //       ),
  //     ),
  //   );

  }
  Widget _buildPieChart() {
    return Column(
      children: [
        Container(
          height: 300,
          child: PieChart(
            PieChartData(
              sections: pieChartSections,
              centerSpaceRadius: 40,
              sectionsSpace: 2,
            ),
          ),
        ),
        SizedBox(height: 20),
        _buildIndicator(), // แสดง Indicator ใต้ Pie Chart
      ],
    );
  }


  // ฟังก์ชันสร้าง Bar Chart
  Widget _buildBarChart() {
    return Container(
      height: 300,
      width: 200,
      child: BarChart(
        BarChartData(
          barGroups: [
            BarChartGroupData(
              x: 1,
              barRods: [
                BarChartRodData(y: totalExpense, colors: [Colors.red], width: 30),
              ],
            ),
            BarChartGroupData(
              x: 0,
              barRods: [
                BarChartRodData(y: totalIncome, colors: [Colors.green], width: 30),
              ],
            ),
          ],
          titlesData: FlTitlesData(
            bottomTitles: SideTitles(
              showTitles: true,
              getTitles: (double value) {
                if (value == 1) {
                  return 'Expense';
                } else if (value == 0) {
                  return 'Income';
                }
                return '';
              },
            ),
          ),
        ),
      ),
    );
  }

  // ฟังก์ชันแสดงกราฟ Pie Chart และดึงข้อมูล
  void _showFinancialPieChart(BuildContext context) {
    if(selectedButton=='Day'){
      _fetchPieChartDataDay();
    } // ดึงข้อมูล Pie Chart ตามช่วงเวลาที่เลือก
    else if(selectedButton=='Month'){
      _fetchPieChartDataMonth();
    }
    else if(selectedButton=='Year'){
      _fetchPieChartDataYear();
    }
  }

  // ฟังก์ชันแสดง Status Expense
  void _showStatus_Expense(BuildContext context) {
    // เพิ่มการทำงานแสดง Status Expense ที่นี่
  }

  // ฟังก์ชันแสดง Bar Chart และดึงข้อมูล
  void _showFinancialBarChart(BuildContext context) {
    if (selectedButton == 'Day') {
      _fetchDataDay(); // ดึงข้อมูลจากฐานข้อมูลเมื่อเลือก Day
    } else if (selectedButton == 'Month') {
      _fetchDataMonth(); // ดึงข้อมูลจากฐานข้อมูลเมื่อเลือก Month
    } else if (selectedButton == 'Year') {
      _fetchDataYear(); // ดึงข้อมูลจากฐานข้อมูลเมื่อเลือก Year
    }
  }

  // ฟังก์ชันดึงข้อมูล Bar Chart จากฐานข้อมูล
  Future<void> _fetchDataDay() async {
    final List<Map<String, dynamic>> incomeResult = await DatabaseManagement.instance.rawQuery(
      'SELECT SUM(amount_transaction) AS total_income FROM transactions WHERE type_expense = 0 AND DATE(date_user) = DATE("now")',
    );

    final List<Map<String, dynamic>> expenseResult = await DatabaseManagement.instance.rawQuery(
      'SELECT SUM(amount_transaction) AS total_expense FROM transactions WHERE type_expense = 1 AND DATE(date_user) = DATE("now")',
    );

    setState(() {
      totalIncome = incomeResult.isNotEmpty && incomeResult[0]['total_income'] != null
          ? incomeResult[0]['total_income'].toDouble()
          : 0.0;
      totalExpense = expenseResult.isNotEmpty && expenseResult[0]['total_expense'] != null
          ? expenseResult[0]['total_expense'].toDouble()
          : 0.0;
    });
  }

  Future<void> _fetchDataMonth() async {
    final List<Map<String, dynamic>> incomeResult = await DatabaseManagement.instance.rawQuery(
        'SELECT SUM(amount_transaction) AS total_income FROM transactions WHERE type_expense = 0 AND strftime("%m", date_user) = strftime("%m", "now") AND strftime("%Y", date_user) = strftime("%Y", "now")'
    );

    final List<Map<String, dynamic>> expenseResult = await DatabaseManagement.instance.rawQuery(
        'SELECT SUM(amount_transaction) AS total_expense FROM transactions WHERE type_expense = 1 AND strftime("%m", date_user) = strftime("%m", "now") AND strftime("%Y", date_user) = strftime("%Y", "now")'
    );

    setState(() {
      totalIncome = incomeResult.isNotEmpty && incomeResult[0]['total_income'] != null
          ? incomeResult[0]['total_income'].toDouble()
          : 0.0;
      totalExpense = expenseResult.isNotEmpty && expenseResult[0]['total_expense'] != null
          ? expenseResult[0]['total_expense'].toDouble()
          : 0.0;
    });
  }

  Future<void> _fetchDataYear() async {
    final List<Map<String, dynamic>> incomeResult = await DatabaseManagement.instance.rawQuery(
        'SELECT SUM(amount_transaction) AS total_income '
            'FROM transactions '
            'WHERE type_expense = 0 '
            'AND strftime("%Y", date_user) = strftime("%Y", "now")'  // เงื่อนไขสำหรับดึงข้อมูลเฉพาะปีปัจจุบัน
    );

    final List<Map<String, dynamic>> expenseResult = await DatabaseManagement.instance.rawQuery(
        'SELECT SUM(amount_transaction) AS total_expense '
            'FROM transactions '
            'WHERE type_expense = 1 '
            'AND strftime("%Y", date_user) = strftime("%Y", "now")'  // เงื่อนไขสำหรับดึงข้อมูลเฉพาะปีปัจจุบัน
    );

    setState(() {
      totalIncome = incomeResult.isNotEmpty && incomeResult[0]['total_income'] != null
          ? incomeResult[0]['total_income'].toDouble()
          : 0.0;
      totalExpense = expenseResult.isNotEmpty && expenseResult[0]['total_expense'] != null
          ? expenseResult[0]['total_expense'].toDouble()
          : 0.0;
    });
  }
}
